#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.8.0
# from Racc grammar file "parser.racc".
#

require 'racc/parser.rb'

require File.dirname(__FILE__) + '/parser.rex.rb'

module SQLParser
  class Parser < Racc::Parser

module_eval(<<'...end parser.racc/module_eval...', 'parser.racc', 333)

def self.parse(sql)
  new.scan_str(sql)
end
...end parser.racc/module_eval...
##### State transition tables begin ###

racc_action_table = [
    44,   218,  -125,    28,    72,    67,    94,   106,     7,    14,
   229,     8,    70,    71,   129,     9,   230,    11,    44,    12,
    94,    28,   220,    53,   221,   222,    55,    69,    56,    69,
   188,    62,    18,  -125,  -125,  -125,    44,    73,    69,    28,
    47,    48,    44,    32,    45,    36,    38,    39,    40,    41,
    18,    49,    69,    52,    47,    48,    44,    87,    86,    28,
    65,    32,    45,    36,    38,    39,    40,    41,    18,    49,
    66,    52,   133,   134,   -81,    77,    47,    48,    78,    32,
    45,    36,    38,    39,    40,    41,    45,    49,    18,    52,
    79,    44,    80,    49,    28,    52,    47,    48,    81,    32,
    45,    36,    38,    39,    40,    41,    99,    49,    82,    52,
  -144,    44,    83,    84,    28,    85,    88,   109,    62,   100,
    69,   102,   103,    18,   104,   105,   211,   212,   117,    69,
   125,    47,    48,   130,    32,    45,    36,    38,    39,    40,
    41,   131,    49,    18,    52,    44,    98,   138,    28,    62,
   140,    47,    48,   141,    32,    45,    36,    38,    39,    40,
    41,   142,    49,    44,    52,    99,    28,   143,   144,    97,
    69,   147,   168,    98,   169,   170,   171,    18,   100,   172,
   102,   103,   173,   104,   105,    47,    48,   174,    32,    45,
    36,    38,    39,    40,    41,    18,    49,    44,    52,   176,
    28,   177,    62,    47,    48,    62,    32,    45,    36,    38,
    39,    40,    41,   183,    49,    44,    52,   184,    28,   188,
   200,   203,   206,   207,   119,    18,   217,   117,   225,    18,
     8,   240,   188,    44,   241,   203,    28,    47,    48,   225,
    32,    45,    36,    38,    39,    40,    41,    18,    49,   245,
    52,    44,   247,   188,    28,    47,    48,    69,    32,    45,
    36,    38,    39,    40,    41,    18,    49,    18,    52,    44,
   252,   254,    28,    47,    48,   255,    32,    45,    36,    38,
    39,    40,    41,    18,    49,   256,    52,    44,    69,   nil,
    28,    47,    48,   nil,    32,    45,    36,    38,    39,    40,
    41,    18,    49,   nil,    52,   nil,   nil,   nil,   nil,    47,
    48,   nil,    32,    45,    36,    38,    39,    40,    41,    18,
    49,    44,    52,   nil,   148,   nil,   nil,    47,    48,   nil,
    32,    45,    36,    38,    39,    40,    41,   nil,    49,    44,
    52,    99,    28,   nil,   nil,   155,   nil,   nil,   nil,   nil,
   nil,   nil,   152,    18,   100,   nil,   102,   103,   nil,   104,
   105,    47,    48,   nil,    32,    45,    36,    38,    39,    40,
    41,    18,    49,    44,    52,   nil,   148,   nil,   nil,    47,
    48,     8,    32,    45,    36,    38,    39,    40,    41,   nil,
    49,   nil,    52,   nil,   nil,   nil,    44,   155,   nil,   148,
   nil,   nil,   nil,   nil,   152,    18,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    47,    48,   nil,    32,    45,    36,    38,
    39,    40,    41,   nil,    49,   nil,    52,   152,    18,    44,
   nil,   nil,    28,   nil,   nil,   nil,    47,    48,   nil,    32,
    45,    36,    38,    39,    40,    41,   nil,    49,   nil,    52,
   nil,   nil,   nil,   nil,   nil,    44,   nil,   nil,   148,   nil,
   nil,    18,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    47,
    48,   nil,    32,    45,    36,    38,    39,    40,    41,   155,
    49,    44,    52,   nil,   148,   nil,   152,    18,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    47,    48,   nil,    32,    45,
    36,    38,    39,    40,    41,   155,    49,    44,    52,   nil,
   223,   nil,   152,    18,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    47,    48,   nil,    32,    45,    36,    38,    39,    40,
    41,   nil,    49,    44,    52,   nil,   223,   nil,   nil,    18,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    47,    48,   nil,
    32,    45,    36,    38,    39,    40,    41,   nil,    49,    44,
    52,   nil,   223,   nil,   nil,    18,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    47,    48,   nil,    32,    45,    36,    38,
    39,    40,    41,   nil,    49,    44,    52,   nil,   223,   nil,
   nil,    18,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    47,
    48,   nil,    32,    45,    36,    38,    39,    40,    41,   nil,
    49,    44,    52,   nil,   223,   nil,   nil,    18,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    47,    48,   nil,    32,    45,
    36,    38,    39,    40,    41,   nil,    49,    44,    52,   nil,
   223,   nil,   nil,    18,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    47,    48,   nil,    32,    45,    36,    38,    39,    40,
    41,   nil,    49,    44,    52,   nil,   223,   nil,   nil,    18,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    47,    48,   nil,
    32,    45,    36,    38,    39,    40,    41,   nil,    49,    44,
    52,   nil,   223,   nil,   nil,    18,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    47,    48,   nil,    32,    45,    36,    38,
    39,    40,    41,   nil,    49,    44,    52,   nil,   148,   nil,
   nil,    18,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    47,
    48,   nil,    32,    45,    36,    38,    39,    40,    41,   155,
    49,    44,    52,   nil,    28,   nil,   152,    18,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    47,    48,   nil,    32,    45,
    36,    38,    39,    40,    41,   nil,    49,    44,    52,   nil,
   148,   nil,   nil,    18,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    47,    48,   nil,    32,    45,    36,    38,    39,    40,
    41,   155,    49,    44,    52,   nil,   223,   nil,   152,    18,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    47,    48,   nil,
    32,    45,    36,    38,    39,    40,    41,   nil,    49,    44,
    52,   nil,   223,   nil,   nil,    18,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    47,    48,   nil,    32,    45,    36,    38,
    39,    40,    41,   nil,    49,    44,    52,   nil,    28,   nil,
   nil,    18,   nil,     8,   nil,   nil,   nil,   nil,   nil,    47,
    48,   nil,    32,    45,    36,    38,    39,    40,    41,   nil,
    49,    44,    52,   nil,    28,   nil,   nil,    18,   nil,     8,
   nil,   nil,   nil,   nil,   nil,    47,    48,   nil,    32,    45,
    36,    38,    39,    40,    41,   nil,    49,    44,    52,   nil,
   223,   nil,   nil,    18,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    47,    48,   nil,    32,    45,    36,    38,    39,    40,
    41,   nil,    49,    44,    52,   nil,   223,   nil,   nil,    18,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    47,    48,   nil,
    32,    45,    36,    38,    39,    40,    41,   nil,    49,   nil,
    52,   nil,   nil,   nil,   nil,    18,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    47,    48,   nil,    32,    45,    36,    38,
    39,    40,    41,   nil,    49,   nil,    52,   189,   190,   nil,
   191,   192,   193,   nil,   nil,   nil,   nil,   194,   195,   196,
   197,   198,   199 ]

racc_action_check = [
     8,   186,    20,     8,    22,    17,    56,    58,     0,     8,
   193,     0,    21,    21,    85,     1,   193,     5,    23,     7,
   131,    23,   189,     9,   189,   189,    10,    17,    11,    58,
   186,    12,     8,    20,    20,    20,    28,    22,    56,    28,
     8,     8,    55,     8,     8,     8,     8,     8,     8,     8,
    23,     8,   131,     8,    85,    85,    66,    49,    49,    66,
    13,    23,    23,    23,    23,    23,    23,    23,    28,    23,
    16,    23,    92,    92,    18,    33,    28,    28,    36,    28,
    28,    28,    28,    28,    28,    28,    55,    28,    66,    28,
    38,    70,    39,    55,    70,    55,    66,    66,    40,    66,
    66,    66,    66,    66,    66,    66,   181,    66,    41,    66,
    42,    71,    44,    45,    71,    46,    52,    64,    65,   181,
    67,   181,   181,    70,   181,   181,   181,   181,    76,    77,
    83,    70,    70,    86,    70,    70,    70,    70,    70,    70,
    70,    90,    70,    71,    70,    72,    96,    98,    72,    99,
   100,    71,    71,   101,    71,    71,    71,    71,    71,    71,
    71,   103,    71,    73,    71,    57,    73,   104,   105,    57,
   106,   108,   119,    57,   120,   121,   122,    72,    57,   123,
    57,    57,   124,    57,    57,    72,    72,   128,    72,    72,
    72,    72,    72,    72,    72,    73,    72,    79,    72,   136,
    79,   137,   140,    73,    73,   141,    73,    73,    73,    73,
    73,    73,    73,   146,    73,    78,    73,   147,    78,   149,
   152,   153,   178,   179,    78,   184,   185,   187,   191,    79,
   200,   212,   213,    80,   214,   219,    80,    79,    79,   221,
    79,    79,    79,    79,    79,    79,    79,    78,    79,   224,
    79,    81,   229,   239,    81,    78,    78,   240,    78,    78,
    78,    78,    78,    78,    78,    80,    78,   241,    78,    82,
   242,   246,    82,    80,    80,   248,    80,    80,    80,    80,
    80,    80,    80,    81,    80,   249,    80,    97,   256,   nil,
    97,    81,    81,   nil,    81,    81,    81,    81,    81,    81,
    81,    82,    81,   nil,    81,   nil,   nil,   nil,   nil,    82,
    82,   nil,    82,    82,    82,    82,    82,    82,    82,    97,
    82,   109,    82,   nil,   109,   nil,   nil,    97,    97,   nil,
    97,    97,    97,    97,    97,    97,    97,   nil,    97,   138,
    97,   110,   138,   nil,   nil,   109,   nil,   nil,   nil,   nil,
   nil,   nil,   109,   109,   110,   nil,   110,   110,   nil,   110,
   110,   109,   109,   nil,   109,   109,   109,   109,   109,   109,
   109,   138,   109,   148,   109,   nil,   148,   nil,   nil,   138,
   138,   148,   138,   138,   138,   138,   138,   138,   138,   nil,
   138,   nil,   138,   nil,   nil,   nil,   155,   148,   nil,   155,
   nil,   nil,   nil,   nil,   148,   148,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   148,   148,   nil,   148,   148,   148,   148,
   148,   148,   148,   nil,   148,   nil,   148,   155,   155,   177,
   nil,   nil,   177,   nil,   nil,   nil,   155,   155,   nil,   155,
   155,   155,   155,   155,   155,   155,   nil,   155,   nil,   155,
   nil,   nil,   nil,   nil,   nil,   183,   nil,   nil,   183,   nil,
   nil,   177,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   177,
   177,   nil,   177,   177,   177,   177,   177,   177,   177,   183,
   177,   188,   177,   nil,   188,   nil,   183,   183,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   183,   183,   nil,   183,   183,
   183,   183,   183,   183,   183,   188,   183,   190,   183,   nil,
   190,   nil,   188,   188,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   188,   188,   nil,   188,   188,   188,   188,   188,   188,
   188,   nil,   188,   192,   188,   nil,   192,   nil,   nil,   190,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   190,   190,   nil,
   190,   190,   190,   190,   190,   190,   190,   nil,   190,   194,
   190,   nil,   194,   nil,   nil,   192,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   192,   192,   nil,   192,   192,   192,   192,
   192,   192,   192,   nil,   192,   195,   192,   nil,   195,   nil,
   nil,   194,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   194,
   194,   nil,   194,   194,   194,   194,   194,   194,   194,   nil,
   194,   196,   194,   nil,   196,   nil,   nil,   195,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   195,   195,   nil,   195,   195,
   195,   195,   195,   195,   195,   nil,   195,   197,   195,   nil,
   197,   nil,   nil,   196,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   196,   196,   nil,   196,   196,   196,   196,   196,   196,
   196,   nil,   196,   198,   196,   nil,   198,   nil,   nil,   197,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   197,   197,   nil,
   197,   197,   197,   197,   197,   197,   197,   nil,   197,   199,
   197,   nil,   199,   nil,   nil,   198,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   198,   198,   nil,   198,   198,   198,   198,
   198,   198,   198,   nil,   198,   203,   198,   nil,   203,   nil,
   nil,   199,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   199,
   199,   nil,   199,   199,   199,   199,   199,   199,   199,   203,
   199,   207,   199,   nil,   207,   nil,   203,   203,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   203,   203,   nil,   203,   203,
   203,   203,   203,   203,   203,   nil,   203,   211,   203,   nil,
   211,   nil,   nil,   207,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   207,   207,   nil,   207,   207,   207,   207,   207,   207,
   207,   211,   207,   220,   207,   nil,   220,   nil,   211,   211,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   211,   211,   nil,
   211,   211,   211,   211,   211,   211,   211,   nil,   211,   222,
   211,   nil,   222,   nil,   nil,   220,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   220,   220,   nil,   220,   220,   220,   220,
   220,   220,   220,   nil,   220,   223,   220,   nil,   223,   nil,
   nil,   222,   nil,   223,   nil,   nil,   nil,   nil,   nil,   222,
   222,   nil,   222,   222,   222,   222,   222,   222,   222,   nil,
   222,   225,   222,   nil,   225,   nil,   nil,   223,   nil,   225,
   nil,   nil,   nil,   nil,   nil,   223,   223,   nil,   223,   223,
   223,   223,   223,   223,   223,   nil,   223,   245,   223,   nil,
   245,   nil,   nil,   225,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   225,   225,   nil,   225,   225,   225,   225,   225,   225,
   225,   nil,   225,   252,   225,   nil,   252,   nil,   nil,   245,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   245,   245,   nil,
   245,   245,   245,   245,   245,   245,   245,   nil,   245,   nil,
   245,   nil,   nil,   nil,   nil,   252,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   252,   252,   nil,   252,   252,   252,   252,
   252,   252,   252,   nil,   252,   nil,   252,   151,   151,   nil,
   151,   151,   151,   nil,   nil,   nil,   nil,   151,   151,   151,
   151,   151,   151 ]

racc_action_pointer = [
    -3,    15,   nil,   nil,   nil,    14,   nil,     7,    -6,    23,
    24,    24,    -7,    43,   nil,   nil,    65,   -11,    24,   nil,
   -13,   -34,   -11,    12,   nil,   nil,   nil,   nil,    30,   nil,
   nil,   nil,   nil,    25,   nil,   nil,    69,   nil,    81,    83,
    89,    99,    54,   nil,    62,   107,    59,   nil,   nil,     0,
   nil,   nil,    56,   nil,   nil,    36,     0,   160,    -9,   nil,
   nil,   nil,   nil,   nil,    90,    80,    50,    82,   nil,   nil,
    85,   105,   139,   157,   nil,   nil,   118,    91,   209,   191,
   227,   245,   263,   124,   nil,     8,    76,   nil,   nil,   nil,
   136,   nil,    65,   nil,   nil,   nil,   133,   281,   138,   111,
   131,   134,   nil,   139,   145,   146,   132,   nil,   143,   315,
   336,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   162,
   164,   165,   166,   169,   172,   nil,   nil,   nil,   181,   nil,
   nil,    14,   nil,   nil,   nil,   nil,   189,   196,   333,   nil,
   164,   167,   nil,   nil,   nil,   nil,   184,   213,   367,   180,
   nil,   947,   211,   189,   nil,   390,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   423,   212,   218,
   nil,   101,   nil,   449,   187,   216,    -9,   217,   475,    -9,
   501,   219,   527,   -20,   553,   579,   605,   631,   657,   683,
   216,   nil,   nil,   709,   nil,   nil,   nil,   735,   nil,   nil,
   nil,   761,   222,   193,   229,   nil,   nil,   nil,   nil,   203,
   787,   230,   813,   839,   217,   865,   nil,   nil,   nil,   216,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   214,
   219,   229,   238,   nil,   nil,   891,   261,   nil,   265,   280,
   nil,   nil,   917,   nil,   nil,   nil,   250,   nil,   nil ]

racc_action_default = [
  -156,  -156,    -1,    -2,    -3,    -7,   -18,  -156,  -156,  -156,
    -5,  -156,  -156,   -26,   -27,   -28,   -30,   -33,  -150,  -108,
  -109,  -112,  -115,  -156,  -117,  -118,  -119,  -120,  -156,  -122,
  -123,  -124,  -126,  -156,  -128,  -129,  -156,  -131,  -156,  -156,
  -156,  -156,  -137,  -138,  -142,  -156,  -156,  -148,  -149,  -156,
  -153,  -154,  -156,   259,    -4,  -156,  -156,  -156,   -38,   -39,
   -41,   -42,   -81,   -25,   -58,  -156,  -156,  -156,   -32,  -150,
  -156,  -156,  -156,  -156,  -116,  -125,  -156,  -156,  -156,  -156,
  -156,  -156,  -156,  -140,  -141,  -156,  -156,  -152,  -155,    -6,
    -8,   -10,   -14,   -12,   -13,   -19,  -156,  -156,  -156,  -156,
  -156,  -156,   -46,   -48,   -50,   -51,  -156,   -37,   -60,  -156,
   -35,   -29,   -31,  -110,  -111,  -113,  -114,  -121,  -127,  -156,
  -156,  -156,  -156,  -156,  -156,  -139,  -143,  -145,  -156,  -147,
  -151,  -156,   -11,   -15,   -16,   -20,  -156,   -23,  -156,   -43,
  -156,  -156,   -47,   -49,   -52,   -36,   -65,  -156,  -156,   -59,
   -67,  -156,  -156,   -84,   -86,  -156,   -89,   -90,   -91,   -93,
   -94,   -95,   -96,   -97,   -98,  -105,  -106,  -107,  -130,  -132,
  -133,  -134,  -135,  -136,  -146,    -9,   -21,  -156,  -156,   -75,
   -44,  -156,   -34,  -156,  -156,  -156,  -156,  -107,  -156,  -156,
  -156,  -156,  -156,  -156,  -156,  -156,  -156,  -156,  -156,  -156,
  -156,   -40,   -80,  -156,   -88,   -22,   -24,  -156,   -45,   -53,
   -54,  -156,  -156,   -66,   -61,   -63,   -64,   -17,   -92,   -85,
  -156,  -156,  -156,  -156,  -156,  -156,   -71,   -72,   -77,  -156,
   -79,   -99,  -100,  -101,  -102,  -103,  -104,   -87,   -74,   -55,
  -156,  -156,  -156,   -70,   -76,  -156,  -156,   -78,  -156,   -57,
   -83,   -62,  -156,   -69,   -73,   -56,  -156,   -68,   -82 ]

racc_goto_table = [
    68,    17,   136,    57,   149,    58,    91,   178,   201,    15,
    95,   215,   216,     1,    75,   226,   113,   114,   115,   116,
     2,    76,     3,     4,     5,   224,    10,   228,    54,   231,
   232,   233,   234,   235,   236,    89,    90,   132,    96,    93,
    13,   107,    63,   186,    64,   243,    75,   201,   108,   135,
   112,   146,   182,   202,   208,   242,   110,   244,    58,    17,
   118,    75,    75,    75,    75,   209,   210,   111,   251,   216,
   248,   120,   121,   122,   123,   124,   238,   201,   213,   249,
   253,   175,   205,   214,   219,   237,   204,   257,   128,   145,
   137,    74,   139,   126,   246,   127,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   239,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    93,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   179,   181,   180,    58,   nil,   nil,   nil,   nil,   nil,
   nil,   187,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   137,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   179,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    76,   nil,   179,   nil,
   nil,   nil,   nil,   250,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   258 ]

racc_goto_check = [
    13,    20,    19,    16,    39,    30,    10,    21,    14,    24,
    17,    43,    44,     1,    61,    49,    60,    60,    62,    62,
     2,    20,     3,     4,     5,    47,     6,    47,     7,    47,
    47,    47,    47,    47,    47,     8,     9,    12,    18,    13,
    22,    13,    23,    39,    26,    49,    61,    14,    27,    17,
    13,    28,    29,    32,    36,    47,    16,    47,    30,    20,
    13,    61,    61,    61,    61,    37,    38,    24,    43,    44,
    40,    20,    20,    20,    20,    20,    21,    14,    39,    41,
    47,    10,    19,    42,    53,    54,    55,    47,    64,    13,
    20,    65,    30,    75,    21,    76,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    39,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    13,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    20,    16,    30,    30,   nil,   nil,   nil,   nil,   nil,
   nil,    20,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    20,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    20,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    20,   nil,    20,   nil,
   nil,   nil,   nil,    13,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    13 ]

racc_goto_pointer = [
   nil,    13,    20,    22,    23,    24,    21,    18,   -20,   -20,
   -50,   nil,   -55,   -17,  -144,   nil,    -9,   -47,   -19,   -95,
    -7,  -131,    32,    29,     1,   nil,    31,   -16,   -57,   -94,
    -7,   nil,   -99,   nil,   nil,   nil,  -127,  -116,  -115,  -105,
  -170,  -161,  -101,  -173,  -172,   nil,   nil,  -165,   nil,  -176,
   nil,   nil,   nil,  -104,  -118,   -69,   nil,   nil,   nil,   nil,
   -54,    -9,   -54,   nil,     3,    68,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,     8,    10,   nil,   nil ]

racc_goto_default = [
   nil,   nil,   nil,   nil,   nil,   185,   nil,   nil,    29,   nil,
   nil,    92,   nil,    34,   150,     6,   nil,   nil,   nil,   nil,
   167,   nil,   nil,   nil,   nil,    16,   nil,   nil,   nil,   nil,
    35,    59,   227,    60,    61,   101,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    26,   166,   160,   151,   161,   nil,
   162,   163,   164,   153,   154,   156,   157,   158,   159,   165,
    19,    20,    21,    22,    23,    24,    25,    27,    30,    31,
    33,    37,    42,    43,    46,   nil,   nil,    50,    51 ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 62, :_reduce_none,
  1, 63, :_reduce_none,
  1, 63, :_reduce_none,
  3, 64, :_reduce_4,
  0, 68, :_reduce_none,
  2, 68, :_reduce_6,
  0, 67, :_reduce_none,
  3, 67, :_reduce_8,
  3, 70, :_reduce_9,
  1, 70, :_reduce_none,
  2, 71, :_reduce_11,
  1, 72, :_reduce_none,
  1, 72, :_reduce_13,
  0, 73, :_reduce_14,
  1, 73, :_reduce_15,
  1, 73, :_reduce_16,
  3, 75, :_reduce_17,
  1, 66, :_reduce_none,
  4, 65, :_reduce_19,
  5, 65, :_reduce_20,
  3, 79, :_reduce_21,
  3, 80, :_reduce_22,
  1, 80, :_reduce_none,
  4, 78, :_reduce_24,
  3, 76, :_reduce_25,
  2, 76, :_reduce_26,
  1, 83, :_reduce_27,
  1, 83, :_reduce_28,
  3, 85, :_reduce_29,
  1, 85, :_reduce_none,
  3, 86, :_reduce_31,
  2, 86, :_reduce_32,
  1, 86, :_reduce_none,
  4, 84, :_reduce_34,
  2, 87, :_reduce_35,
  3, 77, :_reduce_36,
  2, 77, :_reduce_37,
  1, 77, :_reduce_none,
  1, 77, :_reduce_none,
  1, 93, :_reduce_none,
  1, 92, :_reduce_none,
  1, 92, :_reduce_none,
  3, 94, :_reduce_43,
  4, 94, :_reduce_44,
  5, 95, :_reduce_45,
  1, 96, :_reduce_46,
  2, 96, :_reduce_47,
  1, 96, :_reduce_48,
  2, 96, :_reduce_49,
  1, 96, :_reduce_50,
  1, 96, :_reduce_51,
  2, 96, :_reduce_52,
  1, 97, :_reduce_none,
  1, 97, :_reduce_none,
  2, 98, :_reduce_55,
  4, 99, :_reduce_56,
  1, 101, :_reduce_none,
  0, 88, :_reduce_none,
  2, 88, :_reduce_59,
  0, 89, :_reduce_none,
  3, 89, :_reduce_61,
  3, 103, :_reduce_62,
  1, 103, :_reduce_none,
  1, 104, :_reduce_none,
  0, 90, :_reduce_none,
  2, 90, :_reduce_66,
  1, 106, :_reduce_none,
  6, 107, :_reduce_68,
  5, 107, :_reduce_69,
  4, 109, :_reduce_70,
  3, 109, :_reduce_71,
  1, 110, :_reduce_none,
  3, 110, :_reduce_73,
  3, 82, :_reduce_74,
  1, 82, :_reduce_none,
  4, 111, :_reduce_76,
  3, 111, :_reduce_77,
  4, 112, :_reduce_78,
  3, 112, :_reduce_79,
  2, 113, :_reduce_80,
  1, 91, :_reduce_81,
  3, 102, :_reduce_82,
  1, 102, :_reduce_none,
  1, 100, :_reduce_none,
  3, 100, :_reduce_85,
  1, 114, :_reduce_none,
  3, 114, :_reduce_87,
  2, 115, :_reduce_88,
  1, 115, :_reduce_none,
  1, 116, :_reduce_none,
  1, 117, :_reduce_none,
  3, 117, :_reduce_92,
  1, 118, :_reduce_none,
  1, 118, :_reduce_none,
  1, 118, :_reduce_none,
  1, 118, :_reduce_none,
  1, 118, :_reduce_none,
  1, 118, :_reduce_none,
  3, 119, :_reduce_99,
  3, 119, :_reduce_100,
  3, 119, :_reduce_101,
  3, 119, :_reduce_102,
  3, 119, :_reduce_103,
  3, 119, :_reduce_104,
  1, 108, :_reduce_none,
  1, 108, :_reduce_none,
  1, 120, :_reduce_none,
  1, 81, :_reduce_none,
  1, 81, :_reduce_none,
  3, 121, :_reduce_110,
  3, 121, :_reduce_111,
  1, 121, :_reduce_none,
  3, 123, :_reduce_113,
  3, 123, :_reduce_114,
  1, 123, :_reduce_none,
  2, 124, :_reduce_116,
  1, 124, :_reduce_none,
  1, 126, :_reduce_none,
  1, 126, :_reduce_none,
  1, 126, :_reduce_none,
  3, 126, :_reduce_121,
  1, 127, :_reduce_none,
  1, 127, :_reduce_none,
  1, 69, :_reduce_none,
  1, 69, :_reduce_none,
  1, 129, :_reduce_126,
  3, 105, :_reduce_127,
  1, 105, :_reduce_none,
  1, 131, :_reduce_none,
  4, 128, :_reduce_130,
  1, 128, :_reduce_none,
  4, 132, :_reduce_132,
  4, 132, :_reduce_133,
  4, 132, :_reduce_134,
  4, 132, :_reduce_135,
  4, 132, :_reduce_136,
  1, 130, :_reduce_none,
  1, 130, :_reduce_none,
  3, 133, :_reduce_139,
  2, 133, :_reduce_140,
  2, 133, :_reduce_141,
  1, 133, :_reduce_142,
  3, 134, :_reduce_143,
  1, 135, :_reduce_none,
  1, 136, :_reduce_none,
  2, 137, :_reduce_146,
  1, 137, :_reduce_147,
  1, 125, :_reduce_148,
  1, 125, :_reduce_149,
  1, 74, :_reduce_150,
  3, 122, :_reduce_151,
  2, 122, :_reduce_152,
  1, 122, :_reduce_none,
  1, 138, :_reduce_none,
  2, 139, :_reduce_155 ]

racc_reduce_n = 156

racc_shift_n = 259

racc_token_table = {
  false => 0,
  :error => 1,
  :RSLEEP => 2,
  :ORDER => 3,
  :BY => 4,
  :comma => 5,
  :unsigned_integer => 6,
  :ASC => 7,
  :DESC => 8,
  :left_paren => 9,
  :right_paren => 10,
  :INSERT => 11,
  :INTO => 12,
  :VALUES => 13,
  :SELECT => 14,
  :asterisk => 15,
  :AS => 16,
  :FROM => 17,
  :CROSS => 18,
  :JOIN => 19,
  :INNER => 20,
  :LEFT => 21,
  :OUTER => 22,
  :RIGHT => 23,
  :FULL => 24,
  :ON => 25,
  :USING => 26,
  :WHERE => 27,
  :GROUP => 28,
  :HAVING => 29,
  :NOT => 30,
  :BETWEEN => 31,
  :AND => 32,
  :IN => 33,
  :LIKE => 34,
  :IS => 35,
  :NULL => 36,
  :EXISTS => 37,
  :identifier => 38,
  :OR => 39,
  :equals_operator => 40,
  :not_equals_operator => 41,
  :less_than_operator => 42,
  :greater_than_operator => 43,
  :less_than_or_equals_operator => 44,
  :greater_than_or_equals_operator => 45,
  :plus_sign => 46,
  :minus_sign => 47,
  :solidus => 48,
  :CURRENT_USER => 49,
  :period => 50,
  :COUNT => 51,
  :AVG => 52,
  :MAX => 53,
  :MIN => 54,
  :SUM => 55,
  :E => 56,
  :quote => 57,
  :character_string_literal => 58,
  :DATE => 59,
  :date_string => 60 }

racc_nt_base = 61

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]
Ractor.make_shareable(Racc_arg) if defined?(Ractor)

Racc_token_to_s_table = [
  "$end",
  "error",
  "RSLEEP",
  "ORDER",
  "BY",
  "comma",
  "unsigned_integer",
  "ASC",
  "DESC",
  "left_paren",
  "right_paren",
  "INSERT",
  "INTO",
  "VALUES",
  "SELECT",
  "asterisk",
  "AS",
  "FROM",
  "CROSS",
  "JOIN",
  "INNER",
  "LEFT",
  "OUTER",
  "RIGHT",
  "FULL",
  "ON",
  "USING",
  "WHERE",
  "GROUP",
  "HAVING",
  "NOT",
  "BETWEEN",
  "AND",
  "IN",
  "LIKE",
  "IS",
  "NULL",
  "EXISTS",
  "identifier",
  "OR",
  "equals_operator",
  "not_equals_operator",
  "less_than_operator",
  "greater_than_operator",
  "less_than_or_equals_operator",
  "greater_than_or_equals_operator",
  "plus_sign",
  "minus_sign",
  "solidus",
  "CURRENT_USER",
  "period",
  "COUNT",
  "AVG",
  "MAX",
  "MIN",
  "SUM",
  "E",
  "quote",
  "character_string_literal",
  "DATE",
  "date_string",
  "$start",
  "direct_sql_statement",
  "direct_sql_data_statement",
  "direct_select_statement_multiple_rows",
  "insert_specification",
  "query_expression",
  "order_by_clause",
  "rsleep_clause",
  "unsigned_literal",
  "sort_specification_list",
  "sort_specification",
  "sort_key",
  "ordering_specification",
  "column_name",
  "subquery",
  "query_specification",
  "table_reference",
  "value_list",
  "column_list",
  "in_column_list",
  "value_expression",
  "in_value_list",
  "select_list",
  "table_expression",
  "select_sublist",
  "derived_column",
  "from_clause",
  "where_clause",
  "group_by_clause",
  "having_clause",
  "table_name",
  "joined_table",
  "table_subquery",
  "cross_join",
  "qualified_join",
  "join_type",
  "join_specification",
  "join_condition",
  "named_columns_join",
  "search_condition",
  "join_column_list",
  "column_name_list",
  "grouping_column_reference_list",
  "grouping_column_reference",
  "column_reference",
  "row_subquery",
  "between_predicate",
  "row_value_constructor",
  "in_predicate",
  "in_predicate_value",
  "like_predicate",
  "null_predicate",
  "exists_predicate",
  "boolean_term",
  "boolean_factor",
  "boolean_test",
  "boolean_primary",
  "predicate",
  "comparison_predicate",
  "row_value_constructor_element",
  "numeric_value_expression",
  "general_literal",
  "term",
  "factor",
  "sign",
  "value_expression_primary",
  "unsigned_value_specification",
  "set_function_specification",
  "general_value_specification",
  "unsigned_numeric_literal",
  "qualifier",
  "general_set_function",
  "exact_numeric_literal",
  "approximate_numeric_literal",
  "mantissa",
  "exponent",
  "signed_integer",
  "datetime_literal",
  "date_literal" ]
Ractor.make_shareable(Racc_token_to_s_table) if defined?(Ractor)

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

# reduce 2 omitted

# reduce 3 omitted

module_eval(<<'.,.,', 'parser.racc', 13)
  def _reduce_4(val, _values, result)
     result = SQLParser::Statement::DirectSelect.new(val[0], val[1], val[2])
    result
  end
.,.,

# reduce 5 omitted

module_eval(<<'.,.,', 'parser.racc', 18)
  def _reduce_6(val, _values, result)
     result = SQLParser::Statement::Rsleep.new(val[1])
    result
  end
.,.,

# reduce 7 omitted

module_eval(<<'.,.,', 'parser.racc', 22)
  def _reduce_8(val, _values, result)
     result = SQLParser::Statement::OrderBy.new(val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 25)
  def _reduce_9(val, _values, result)
     result = Array(val[0]) + Array(val[2])
    result
  end
.,.,

# reduce 10 omitted

module_eval(<<'.,.,', 'parser.racc', 29)
  def _reduce_11(val, _values, result)
     result = val[1].new(val[0])
    result
  end
.,.,

# reduce 12 omitted

module_eval(<<'.,.,', 'parser.racc', 33)
  def _reduce_13(val, _values, result)
     result = SQLParser::Statement::Integer.new(val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 36)
  def _reduce_14(val, _values, result)
     result = SQLParser::Statement::Ascending
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 37)
  def _reduce_15(val, _values, result)
     result = SQLParser::Statement::Ascending
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 38)
  def _reduce_16(val, _values, result)
     result = SQLParser::Statement::Descending
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 43)
  def _reduce_17(val, _values, result)
     result = SQLParser::Statement::Subquery.new(val[1])
    result
  end
.,.,

# reduce 18 omitted

module_eval(<<'.,.,', 'parser.racc', 49)
  def _reduce_19(val, _values, result)
     result = SQLParser::Statement::Insert.new(val[2], nil, val[3])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 50)
  def _reduce_20(val, _values, result)
     result = SQLParser::Statement::Insert.new(val[2], val[3], val[4])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 53)
  def _reduce_21(val, _values, result)
     result = SQLParser::Statement::InColumnList.new(val[1])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 56)
  def _reduce_22(val, _values, result)
     result = Array(val[0]) + Array(val[2])
    result
  end
.,.,

# reduce 23 omitted

module_eval(<<'.,.,', 'parser.racc', 60)
  def _reduce_24(val, _values, result)
     result = SQLParser::Statement::InValueList.new(val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 63)
  def _reduce_25(val, _values, result)
     result = SQLParser::Statement::Select.new(val[1], val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 64)
  def _reduce_26(val, _values, result)
     result = SQLParser::Statement::Select.new(val[1])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 67)
  def _reduce_27(val, _values, result)
     result = SQLParser::Statement::All.new
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 68)
  def _reduce_28(val, _values, result)
     result = SQLParser::Statement::SelectList.new(val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 71)
  def _reduce_29(val, _values, result)
     result = Array(val[0]) + Array(val[2])
    result
  end
.,.,

# reduce 30 omitted

module_eval(<<'.,.,', 'parser.racc', 75)
  def _reduce_31(val, _values, result)
     result = SQLParser::Statement::As.new(val[0], val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 76)
  def _reduce_32(val, _values, result)
     result = SQLParser::Statement::As.new(val[0], val[1])
    result
  end
.,.,

# reduce 33 omitted

module_eval(<<'.,.,', 'parser.racc', 80)
  def _reduce_34(val, _values, result)
     result = SQLParser::Statement::TableExpression.new(val[0], val[1], val[2], val[3])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 83)
  def _reduce_35(val, _values, result)
     result = SQLParser::Statement::FromClause.new(val[1])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 86)
  def _reduce_36(val, _values, result)
     result = SQLParser::Statement::As.new(val[0], val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 87)
  def _reduce_37(val, _values, result)
     result = SQLParser::Statement::As.new(val[0], val[1])
    result
  end
.,.,

# reduce 38 omitted

# reduce 39 omitted

# reduce 40 omitted

# reduce 41 omitted

# reduce 42 omitted

module_eval(<<'.,.,', 'parser.racc', 99)
  def _reduce_43(val, _values, result)
     result = SQLParser::Statement::CrossJoin.new(val[0], val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 100)
  def _reduce_44(val, _values, result)
     result = SQLParser::Statement::CrossJoin.new(val[0], val[3])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 103)
  def _reduce_45(val, _values, result)
     result = val[1].new(val[0], val[3], val[4])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 106)
  def _reduce_46(val, _values, result)
     result = SQLParser::Statement::InnerJoin
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 107)
  def _reduce_47(val, _values, result)
     result = SQLParser::Statement::LeftOuterJoin
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 108)
  def _reduce_48(val, _values, result)
     result = SQLParser::Statement::LeftJoin
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 109)
  def _reduce_49(val, _values, result)
     result = SQLParser::Statement::RightOuterJoin
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 110)
  def _reduce_50(val, _values, result)
     result = SQLParser::Statement::RightJoin
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 111)
  def _reduce_51(val, _values, result)
     result = SQLParser::Statement::FullJoin
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 112)
  def _reduce_52(val, _values, result)
     result = SQLParser::Statement::FullOuterJoin
    result
  end
.,.,

# reduce 53 omitted

# reduce 54 omitted

module_eval(<<'.,.,', 'parser.racc', 119)
  def _reduce_55(val, _values, result)
     result = SQLParser::Statement::On.new(val[1])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 122)
  def _reduce_56(val, _values, result)
     result = SQLParser::Statement::Using.new(val[2])
    result
  end
.,.,

# reduce 57 omitted

# reduce 58 omitted

module_eval(<<'.,.,', 'parser.racc', 129)
  def _reduce_59(val, _values, result)
     result = SQLParser::Statement::WhereClause.new(val[1])
    result
  end
.,.,

# reduce 60 omitted

module_eval(<<'.,.,', 'parser.racc', 133)
  def _reduce_61(val, _values, result)
     result = SQLParser::Statement::GroupByClause.new(val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 136)
  def _reduce_62(val, _values, result)
     result = Array(val[0]) + Array(val[2])
    result
  end
.,.,

# reduce 63 omitted

# reduce 64 omitted

# reduce 65 omitted

module_eval(<<'.,.,', 'parser.racc', 144)
  def _reduce_66(val, _values, result)
     result = SQLParser::Statement::HavingClause.new(val[1])
    result
  end
.,.,

# reduce 67 omitted

module_eval(<<'.,.,', 'parser.racc', 151)
  def _reduce_68(val, _values, result)
     result = SQLParser::Statement::Not.new(SQLParser::Statement::Between.new(val[0], val[3], val[5]))
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 152)
  def _reduce_69(val, _values, result)
     result = SQLParser::Statement::Between.new(val[0], val[2], val[4])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 155)
  def _reduce_70(val, _values, result)
     result = SQLParser::Statement::Not.new(SQLParser::Statement::In.new(val[0], val[3]))
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 156)
  def _reduce_71(val, _values, result)
     result = SQLParser::Statement::In.new(val[0], val[2])
    result
  end
.,.,

# reduce 72 omitted

module_eval(<<'.,.,', 'parser.racc', 160)
  def _reduce_73(val, _values, result)
     result = SQLParser::Statement::InValueList.new(val[1])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 163)
  def _reduce_74(val, _values, result)
     result = Array(val[0]) + Array(val[2])
    result
  end
.,.,

# reduce 75 omitted

module_eval(<<'.,.,', 'parser.racc', 170)
  def _reduce_76(val, _values, result)
     result = SQLParser::Statement::Not.new(SQLParser::Statement::Like.new(val[0], val[3]))
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 171)
  def _reduce_77(val, _values, result)
     result = SQLParser::Statement::Like.new(val[0], val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 174)
  def _reduce_78(val, _values, result)
     result = SQLParser::Statement::Not.new(SQLParser::Statement::Is.new(val[0], SQLParser::Statement::Null.new))
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 175)
  def _reduce_79(val, _values, result)
     result = SQLParser::Statement::Is.new(val[0], SQLParser::Statement::Null.new)
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 178)
  def _reduce_80(val, _values, result)
     result = SQLParser::Statement::Exists.new(val[1])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 182)
  def _reduce_81(val, _values, result)
     result = SQLParser::Statement::Table.new(val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 185)
  def _reduce_82(val, _values, result)
     result = Array(val[0]) + Array(val[2])
    result
  end
.,.,

# reduce 83 omitted

# reduce 84 omitted

module_eval(<<'.,.,', 'parser.racc', 191)
  def _reduce_85(val, _values, result)
     result = SQLParser::Statement::Or.new(val[0], val[2])
    result
  end
.,.,

# reduce 86 omitted

module_eval(<<'.,.,', 'parser.racc', 195)
  def _reduce_87(val, _values, result)
     result = SQLParser::Statement::And.new(val[0], val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 198)
  def _reduce_88(val, _values, result)
     result = SQLParser::Statement::Not.new(val[1])
    result
  end
.,.,

# reduce 89 omitted

# reduce 90 omitted

# reduce 91 omitted

module_eval(<<'.,.,', 'parser.racc', 206)
  def _reduce_92(val, _values, result)
     result = val[1]
    result
  end
.,.,

# reduce 93 omitted

# reduce 94 omitted

# reduce 95 omitted

# reduce 96 omitted

# reduce 97 omitted

# reduce 98 omitted

module_eval(<<'.,.,', 'parser.racc', 217)
  def _reduce_99(val, _values, result)
     result = SQLParser::Statement::Equals.new(val[0], val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 218)
  def _reduce_100(val, _values, result)
     result = SQLParser::Statement::Not.new(SQLParser::Statement::Equals.new(val[0], val[2]))
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 219)
  def _reduce_101(val, _values, result)
     result = SQLParser::Statement::Less.new(val[0], val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 220)
  def _reduce_102(val, _values, result)
     result = SQLParser::Statement::Greater.new(val[0], val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 221)
  def _reduce_103(val, _values, result)
     result = SQLParser::Statement::LessOrEquals.new(val[0], val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 222)
  def _reduce_104(val, _values, result)
     result = SQLParser::Statement::GreaterOrEquals.new(val[0], val[2])
    result
  end
.,.,

# reduce 105 omitted

# reduce 106 omitted

# reduce 107 omitted

# reduce 108 omitted

# reduce 109 omitted

module_eval(<<'.,.,', 'parser.racc', 236)
  def _reduce_110(val, _values, result)
     result = SQLParser::Statement::Add.new(val[0], val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 237)
  def _reduce_111(val, _values, result)
     result = SQLParser::Statement::Subtract.new(val[0], val[2])
    result
  end
.,.,

# reduce 112 omitted

module_eval(<<'.,.,', 'parser.racc', 241)
  def _reduce_113(val, _values, result)
     result = SQLParser::Statement::Multiply.new(val[0], val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 242)
  def _reduce_114(val, _values, result)
     result = SQLParser::Statement::Divide.new(val[0], val[2])
    result
  end
.,.,

# reduce 115 omitted

module_eval(<<'.,.,', 'parser.racc', 246)
  def _reduce_116(val, _values, result)
     result = val[0].new(val[1])
    result
  end
.,.,

# reduce 117 omitted

# reduce 118 omitted

# reduce 119 omitted

# reduce 120 omitted

module_eval(<<'.,.,', 'parser.racc', 253)
  def _reduce_121(val, _values, result)
     result = val[1]
    result
  end
.,.,

# reduce 122 omitted

# reduce 123 omitted

# reduce 124 omitted

# reduce 125 omitted

module_eval(<<'.,.,', 'parser.racc', 264)
  def _reduce_126(val, _values, result)
     result = SQLParser::Statement::CurrentUser.new
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 267)
  def _reduce_127(val, _values, result)
     result = SQLParser::Statement::QualifiedColumn.new(val[0], val[2])
    result
  end
.,.,

# reduce 128 omitted

# reduce 129 omitted

module_eval(<<'.,.,', 'parser.racc', 274)
  def _reduce_130(val, _values, result)
     result = SQLParser::Statement::Count.new(SQLParser::Statement::All.new)
    result
  end
.,.,

# reduce 131 omitted

module_eval(<<'.,.,', 'parser.racc', 278)
  def _reduce_132(val, _values, result)
     result = SQLParser::Statement::Count.new(val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 279)
  def _reduce_133(val, _values, result)
     result = SQLParser::Statement::Average.new(val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 280)
  def _reduce_134(val, _values, result)
     result = SQLParser::Statement::Maximum.new(val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 281)
  def _reduce_135(val, _values, result)
     result = SQLParser::Statement::Minimum.new(val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 282)
  def _reduce_136(val, _values, result)
     result = SQLParser::Statement::Sum.new(val[2])
    result
  end
.,.,

# reduce 137 omitted

# reduce 138 omitted

module_eval(<<'.,.,', 'parser.racc', 290)
  def _reduce_139(val, _values, result)
     result = SQLParser::Statement::Float.new("#{val[0]}.#{val[2]}".to_f)
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 291)
  def _reduce_140(val, _values, result)
     result = SQLParser::Statement::Float.new(val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 292)
  def _reduce_141(val, _values, result)
     result = SQLParser::Statement::Float.new("0.#{val[1]}".to_f)
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 293)
  def _reduce_142(val, _values, result)
     result = SQLParser::Statement::Integer.new(val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 296)
  def _reduce_143(val, _values, result)
     result = SQLParser::Statement::ApproximateFloat.new(val[0], val[2])
    result
  end
.,.,

# reduce 144 omitted

# reduce 145 omitted

module_eval(<<'.,.,', 'parser.racc', 305)
  def _reduce_146(val, _values, result)
     result = val[0].new(SQLParser::Statement::Integer.new(val[1]))
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 306)
  def _reduce_147(val, _values, result)
     result = SQLParser::Statement::Integer.new(val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 309)
  def _reduce_148(val, _values, result)
     result = SQLParser::Statement::UnaryPlus
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 310)
  def _reduce_149(val, _values, result)
     result = SQLParser::Statement::UnaryMinus
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 314)
  def _reduce_150(val, _values, result)
     result = SQLParser::Statement::Column.new(val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 318)
  def _reduce_151(val, _values, result)
     result = SQLParser::Statement::String.new(val[1])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 319)
  def _reduce_152(val, _values, result)
     result = SQLParser::Statement::String.new('')
    result
  end
.,.,

# reduce 153 omitted

# reduce 154 omitted

module_eval(<<'.,.,', 'parser.racc', 326)
  def _reduce_155(val, _values, result)
     result = SQLParser::Statement::Date.new(val[1])
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class Parser
end   # module SQLParser
